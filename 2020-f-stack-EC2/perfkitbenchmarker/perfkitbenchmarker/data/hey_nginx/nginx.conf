
#user  nobody;
worker_processes  REPLACE_ME_WITH_NUM_LOGICAL_CPUS;

error_log  logs/error.log debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections 4098;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    server {
        listen 127.0.0.1:6041;
        allow  127.0.0.1;
        deny   all;
 
        location /basic_status {
            stub_status;
        }
        location = /lua {
        default_type text/plain;
        content_by_lua '
          if jit then
            ngx.say(jit.version)
          else
           	ngx.say("Not LuaJIT!")
          end
        ';
        }
    }

    # HTTPS server
    server {
        listen       4433 ssl http2 default_server;
        server_name  REPLACE_ME_WITH_SERVER_IP;

        access_log off;
        #error_log  off;
        error_log logs/http_error.log debug;

        brotli            on;
        brotli_comp_level 5;
        brotli_types      text/html text/css text/javascript application/javascript;

        ssl_certificate      ./certificate.pem;
        ssl_certificate_key  ./privatekey.key;

        ssl_protocols              TLSv1.2;
        ssl_ciphers                ECDHE-ECDSA-AES128-GCM-SHA256;
        ssl_prefer_server_ciphers  on;

        location /content {
            rewrite_by_lua_block {
                local uri = ngx.var.uri

                if (uri == "/content/1") then
                    ngx.req.set_uri("/1.html")
                elseif (uri == "/content/2") then
                    ngx.req.set_uri("/2.css")
                elseif (uri == "/content/3") then
                   ngx.req.set_uri("/3.js")
                end
            }

            header_filter_by_lua_block { ngx.header.content_length = nil }            

            body_filter_by_lua_block {
                ngx.arg[1] = "<!-- What up " .. os.date() .. " -->" .. ngx.arg[1] .. "<!-- " .. os.clock() .. "-->"
                ngx.arg[1] = string.gsub(ngx.arg[1], "\n", "")
                ngx.arg[1] = string.gsub(ngx.arg[1], ">%s+<", "")
           }
        }
    }
}
